{"version":3,"sources":["webpack:///./app/scripts/packs/mindmap.js","webpack:///./config/modern-polyfills.js"],"names":["container","d3","resize","html","node","offsetWidth","append","attr","window","addEventListener","_","debounce","require"],"mappings":"+IAAA,4CAMMA,GANN,UAMkBC,IAAU,QAW5B,SAASC,IARoBF,EAAUG,KAAK,IAGhBH,EAAUI,OAAOC,YAejCJ,IAAU,OAGjBK,OAAO,SACPC,KAAK,aAAc,kCACnBA,KAAK,QAAS,KACdA,KAAK,SAAU,KA4BpBL,IACAM,OAAOC,iBAAiB,SAAUC,IAAEC,SAAST,EAAQ,O,kCC3DrDU,EAAQ,S","file":"mindmap.fd08e3caad.mjs","sourcesContent":["/* eslint-disable no-unused-vars */\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\n// main code for feature graphics\n// a reference to the default graphic container, change if needed\nconst container = d3.select('svg');\n\n// a helper function to clear the container of its contents\nconst clearContainer = () => container.html('');\n\n// a helper function to grab the container's width\nconst getFrameWidth = () => container.node().offsetWidth;\n\nimport data from '../../../data/data.json';\n// let pesutBpp = data['pesut_bpp'];\n\nfunction resize() {\n  // code executed on window resize\n  clearContainer();\n  const frameWidth = getFrameWidth();\n  var breakPoint = 400;\n  const isMobile = frameWidth < breakPoint;\n\n  //   var mapContainer = map.getCanvasContainer();\n  //   console.log(mapContainer);\n\n  var svg = d3.select('svg');\n\n  var image = svg\n    .append('image')\n    .attr('xlink:href', 'http://lorempixel.com/200/200/')\n    .attr('width', 200)\n    .attr('height', 200);\n\n  // .style(\"position\", \"absolute\")\n  // .style(\"z-index\", 2);\n\n  //   function project(d) {\n  //   return map.project(new mapboxgl.LngLat(d[\"LONG\"], d[\"LAT\"]));\n  // }\n  // //change LAT and LONG to whatever the lat long fields are\n\n  //   var dots = svg\n  //     .selectAll(\"circle\")\n  //     .data(pesutBpp)\n  //     .enter()\n  //     .append(\"circle\")\n  //     .attr(\"r\", 3)\n  //     .style(\"fill\", \"000000\")\n  //     .attr(\"cx\", function(d) {\n  //         return project(d).x;\n  //       })\n  //     .attr(\"cy\", function(d) {\n  //         return project(d).y;\n  //       });\n\n  // pass the recalculated frameWidth to parts of your chart (like an axis) that change with resize!\n}\n\n// call resize on load\nresize();\nwindow.addEventListener('resize', _.debounce(resize, 200));\n","'use strict';\n\n// We depend on intersection-observer enough that it should just be assumed as necessary\nrequire('intersection-observer');\n"],"sourceRoot":""}